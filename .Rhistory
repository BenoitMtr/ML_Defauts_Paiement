plot(tree3)
text(tree3, pretty=0)
tree3 <- tree(Produit ~., produit_EA)
plot(tree3)
text(tree3, pretty=0)
test_tree1 <- predict(tree1, produit_ET, type="class")
test_tree1 <- predict(tree1, produit_ET, type="class")
print(test_tree1)
table(test_tree1)
test_tree2 <- predict(tree2, produit_ET, type="class")
print(test_tree2)
table(test_tree2)
produit_ET$Tree1 <- test_tree1
produit_ET$Tree2 <- test_tree2
produit_ET$Tree3 <- test_tree3
View(produit_ET[,c("Produit", "Tree1", "Tree2", "Tree3")])
test_tree3 <- predict(tree3, produit_ET, type="class")
print(test_tree3)
table(test_tree3)
produit_ET$Tree1 <- test_tree1
produit_ET$Tree2 <- test_tree2
produit_ET$Tree3 <- test_tree3
View(produit_ET[,c("Produit", "Tree1", "Tree2", "Tree3")])
taux_succes1 <- nrow(produit_ET[produit_ET$Produit==produit_ET$Tree1,]) /
nrow(produit_ET)
taux_succes2 <- nrow(produit_ET[produit_ET$Produit==produit_ET$Tree2,]) /
nrow(produit_ET)
taux_succes3 <- nrow(produit_ET[produit_ET$Produit==produit_ET$Tree3,]) /
nrow(produit_ET)
produit_PR <- read.csv("Data Produit Prospects.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
str(produit_PR)
class_tree2 <- predict(tree2, produit_PR, type="class")
table(class_tree2)
produit_PR$Prediction <- class_tree2
write.table(produit_PR, file='resultats.csv', sep="\t", dec=".", row.names = F)
produit_PR$Prediction <- class_tree2
write.table(produit_PR, file='resultats.csv', sep="\t", dec=".", row.names = F)
View(produit_ET)
df_result1 <- data.frame(produit_ET$Produit, test_tree1, prob_tree1[,2], prob_tree1[,1])
prob_tree1 <- predict(tree1, produit_EA, type = "prob")
print(tree1)
#liste de probas de Produit=Oui
prob_tree1[,2]
#liste de probas de Produit=Non
prob_tree1[,1]
df_result1 <- data.frame(produit_ET$Produit, test_tree1, prob_tree1[,2], prob_tree1[,1])
View(df_result1)
colnames(nom_data_frame) = list("Classe","Prediction","P(Oui)","P(Non)")
colnames(df_result1) = list("Classe","Prediction","P(Oui)","P(Non)")
View(df_result1)
summary(df_result1[df_result1$Prediction=="Oui", "P(Oui)"])
summary(df_result1[df_result1$Prediction=="Non", "P(Non)"])
library(rpart)
library(C50)
library(tree)
library(rpart.plot)
produit <- read.csv("Data Produit.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
str(produit)
? rpart()
tree1 <- rpart(split="gini", minbucket=10,Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
produit_EA <- produit[1:400,]
produit_ET <- produit[length(produit_EA):length(produit),]
tree1 <- rpart(split="gini", minbucket=10,Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
control =rpart.control(minbucket = 10)
tree1 <- rpart(control, parms, Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
control =rpart.control(minbucket = 10)
parms = list(split="gini")
tree1 <- rpart(control, parms, Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
library(rpart)
tree1 <- rpart(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
tree1 <- rpart(parms = list(split="gini"), control =rpart.control(minbucket = 10), Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
tree2 <- rpart(parms = list(split="gini"), control =rpart.control(minbucket = 5), Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
tree3 <- rpart(parms = list(split="information"), control =rpart.control(minbucket = 10), Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
tree4 <- rpart(parms = list(split="information"), control =rpart.control(minbucket = 5), Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
plot.rpart(tree1)
plot(tree1)
text(tree1)
plot(tree2)
text(tree2)
plot(tree3)
text(tree3)
plot(tree4)
text(tree4)
produit_ET$Prediction1 <- tree1
nbr_succes1 <- length(produit_ET[produit_ET$Produit==produit_ET$Prediction,
"ID"])
taux_succes1 <- nbr_succes1/nrow(produit_ET)
plot(tree3)
text(tree3)
plot(tree4)
text(tree4)
produit_ET$Prediction2 <- tree3
nbr_succes2 <- length(produit_ET[produit_ET$Produit==produit_ET$Prediction,
"ID"])
taux_succes2 <- nbr_succes2/nrow(produit_ET)
View(produit_ET)
produit_ET$Prediction1 <- tree1
View(produit_ET)
produit_ET <- produit[length(produit_EA):length(produit),]
produit_ET <- produit[401:600,]
produit_ET$Prediction1 <- tree1
library(rpart)
library(C50)
library(tree)
library(rpart.plot)
produit <- read.csv("Data Produit.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
str(produit)
produit_EA <- produit[1:400,]
produit_ET <- produit[length(produit_EA):length(produit),]
tree1 <- rpart(Produit~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
tree2 <- C5.0(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
plot.C5.0(tree2)
plot.C5.0()
library(rpart)
library(C50)
library(tree)
library(rpart.plot)
library(C50)
tree2 <- C5.0(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
plot.C5.0(tree2)
plot.C5.0()
tree3 <- tree(Produit ~Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
plot.tree(tree3)
text(tree3, pretty=0)
library(rpart)
library(tree)
plot.tree(tree3)
tree1 <- rpart(Produit~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
prp(tree1)
text(tree1, pretty=0)
tree2 <- C5.0(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
plot(tree2)
tree3 <- tree(Produit ~Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
plot(tree3)
text(tree3, pretty=0)
tree1 <- rpart(Produit~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
prp(tree1)
text(tree1, pretty=0)
tree2 <- C5.0(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
plot(tree2)
tree3 <- tree(Produit ~Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
plot(tree3)
text(tree3, pretty=0)
test_tree1 <- predict(tree1, produit_ET, type="class")
test_tree2 <- predict(tree2, produit_ET, type="class")
test_tree3 <- predict(tree3, produit_ET, type="class")
table(test_tree1)
table(test_tree2)
table(test_tree3)
mc_tree1 <- table(produit_ET$Produit, test_tree1)
mc_tree2 <- table(produit_ET$Produit, test_tree2)
mc_tree3 <- table(produit_ET$Produit, test_tree3)
print(mc_tree1)
print(mc_tree2)
print(mc_tree3)
# Taux de Vrais Négatifs
print(mc_tree3[1,1]/(mc_tree3[1,1]+mc_tree3[2,1]))
# Taux de Vrais Négatifs
print(mc_tree3[1,1]/(mc_tree3[1,1]+mc_tree3[2,1]))
install.packages("C50")
install.packages("tree")
# Apprentissage arbre
tree1 <- rpart(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt
, produit_EA)
# Affichage graphique par la fonction prp() de la librairie rpart.plot
prp(tree1, type=4, extra=8, box.palette = "auto")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
# Apprentissage arbre
tree1 <- rpart(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt
, produit_EA)
# Affichage graphique par la fonction prp() de la librairie rpart.plot
prp(tree1, type=4, extra=8, box.palette = "auto")
# Apprentissage arbre
tree2 <- C5.0(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt
, produit_EA)
# Affichage graphique par plot.C5.0
plot(tree2, type="simple")
library(rpart)
library(C50)
library(tree)
# Apprentissage arbre
tree1 <- rpart(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt
, produit_EA)
# Affichage graphique par la fonction prp() de la librairie rpart.plot
prp(tree1, type=4, extra=8, box.palette = "auto")
# Apprentissage arbre
tree2 <- C5.0(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt
, produit_EA)
# Affichage graphique par plot.C5.0
plot(tree2, type="simple")
tree2 <- C5.0(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
tree2 <- C5.0(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt, produit_EA)
tree3 <- tree(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt
plot(tree3)
text(tree3, pretty=0)
plot(tree3)
text(tree3, pretty=0)
# Apprentissage arbre
tree3 <- tree(Produit ~ Age+Sexe+Habitat+Revenus+Marie+Enfants+Voiture+Compte_Epargne+Compte_Courant+Emprunt
, data=produit_EA)
tree2 <- C5.0(Produit~., produit_EA)
# Installation/m-a-j des librairies si nnecessaire
install.packages("rpart")
install.packages("rpart")
produit_EA <- subset(produit_EA, select=-ID)
View(produit_EA)
tree2 <- C5.0(Produit~., produit_EA)
tree2 <- C5.0(Produit~., produit_EA)
install.packages("rpart")
library(rpart)
install.packages("rpart.plot")
library(rpart.plot)
install.packages("C50")
library(C50)
install.packages("tree")
library(tree)
install.packages("ROCR")
library(ROCR)
install.packages("rpart")
install.packages("tree")
install.packages("tree")
# Apprentissage arbre
tree1 <- rpart(Produit~., produit_EA)
# Affichage graphique par la fonction prp() de la librairie rpart.plot
prp(tree1, type=4, extra=8, box.palette = "auto")
#----------------------------------------#
# APPRENTISSAGE ARBRE DE DECISION 'C5.0' #
#----------------------------------------#
# Apprentissage arbre
tree2 <- C5.0(Produit~., produit_EA)
# Affichage graphique par plot.C5.0
plot(tree2, type="simple")
# Apprentissage arbre
tree3 <- tree(Produit~., data=produit_EA)
# Affichage graphique par plot.tree() et text.tree()
plot(tree3)
text(tree3, pretty=0)
produit_EA <- subset(produit_EA, select=-ID)
prob_tree1 <- predict(tree1, produit_ET, type="prob")
print(prob_tree1)
roc_pred1 <- prediction(prob_tree1[,2], produit_ET$Produit)
print(roc_pred1)
roc_pred1 <- prediction(prob_tree1[,2], produit_ET$Produit, label.ordering = c("Non", "Oui"))
print(roc_pred1)
roc_pred1 <- prediction(prob_tree1[,2], produit_ET$Produit, labels = "Oui")
roc_perf1 <- performance(roc_pred1,"tpr","fpr")
print(roc_perf1)
plot(roc_perf1, col = "green")
auc_tree1 <- performance(roc_pred1, "auc")
str(auc_tree1)
attr(auc_tree1, "y.values")
#-------------------------#
# PREPARATION DES DONNEES #
#-------------------------#
# Chargement des donnees
produit <- read.csv("Data Produit.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
str(produit)
# Creation des ensembles d'apprentissage et de test
produit_EA <- produit[1:400,]
produit_ET <- produit[401:600,]
# Suppression de la variable ID
produit_EA <- subset(produit_EA, select=-ID)
#-------------------------------------------------#
# INSTALLATION/M-A-J ET ACTIVATION DES LIBRAIRIES #
#-------------------------------------------------#
install.packages("rpart")
library(rpart)
install.packages("rpart.plot")
library(rpart.plot)
install.packages("C50")
library(C50)
install.packages("tree")
library(tree)
install.packages("ROCR")
library(ROCR)
install.packages("rpart")
install.packages("rpart.plot")
install.packages("C50")
install.packages("tree")
install.packages("ROCR")
summary(produit)
produit[produit$Produit=="Oui", ]
length(produit[produit$Produit=="Oui", ])
produit[produit$Produit=="Oui", "ID"]
length(produit[produit$Produit=="Oui", "ID"])
table(produit$Produit)
table(produit$Enfants, produit$Produit)
table(produit$Habitat, produit$Produit)
install.packages("ggplot2")
qplot(produit$Produit, data=produit)
library(gplot2)
library(ggplot2)
# Creation des ensembles d'apprentissage et de test
produit_EA <- produit[1:400,]
qplot(produit$Produit, data=produit)
qplot(produit$Sexe, data=produit)
qplot(produit$Habitat, data=produit)
qplot(produit$Marie, data=produit)
qplot(produit$Habitat,color=produit$Produit, data=produit)
qplot(produit$Habitat,fill=produit$Produit, data=produit)
qplot(produit$Enfants, data=produit)
qplot(produit$Age, data=produit)
install.packages("rpart")
qplot(produit$Age, fill=produit$Produit, data=produit)
qplot(produit$Revenus, binwidth=40000, fill=produit$Produit, data=produit)
boxplot(produit$Age, data=produit)
summary(produit)
length(produit[produit$Produit=="Oui", ])
produit[produit$Produit=="Oui", ]
length(produit[produit$Produit=="Oui", "ID"])
produit[produit$Produit=="Oui", "ID"]
produit[produit$Produit=="Oui", ]
boxplot(produit$Revenus, data=produit)
summary(produit$Revenus)
boxplot(produit$Age~produit$Produit, data=produit)
tapply(Age, Produit, summary)
tapply(produit$Age, produit$Produit, summary)
boxplot(produit$Revenus~produit$Produit, col=c("tomato","darkturquoise"), data=produit)
tapply(produit$Revenus, produit$Produit, summary)
payment_QF_EA <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
setwd("~/M2 INTENSE/Machine Learning/projet")
payment_QF_EA <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
payment_QF_ET <- read.csv("Data Projet New.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
View(payment_QF_EA)
View(payment_QF_ET)
View(payment_QF_EA)
test_rpart <- function(arg1, arg2, arg3, arg4){
# Apprentissage du classifeur
dt <- rpart(default~., payment_QF_EA, parms = list(split = arg1), control = rpart.control(minbucket = arg2))
# Tests du classifieur : classe predite
dt_class <- predict(dt, payment_QF_ET, type="class")
# Matrice de confusion
print(table(payment_QF_ET$default, dt_class))
# Tests du classifieur : probabilites pour chaque prediction
dt_prob <- predict(dt, payment_QF_ET, type="prob")
# Courbes ROC
dt_pred <- prediction(dt_prob[,2], payment_QF_ET$default)
dt_perf <- performance(dt_pred,"tpr","fpr")
plot(dt_perf, main = "Arbres de décision rpart()", add = arg3, col = arg4)
# Calcul de l'AUC et affichage par la fonction cat()
dt_auc <- performance(dt_pred, "auc")
cat("AUC = ", as.character(attr(dt_auc, "y.values")))
# Return sans affichage sur la console
invisible()
}
test_rpart("gini", 10, FALSE, "red")
install.packages("rpart")
install.packages("randomForest")
install.packages("kknn")
install.packages("rpart")
install.packages("rpart")
library(rpart)
library(randomForest)
library(kknn)
library(rpart)
test_rpart("gini", 10, FALSE, "red")
test_nb <- function(arg1, arg2, arg3, arg4){
# Apprentissage du classifeur
nb <- naive_bayes(default~., payment_QF_EA, laplace = arg1, usekernel = arg2)
# Test du classifeur : classe predite
nb_class <- predict(nb, payment_QF_ET, type="class")
payment_QF_ET$default <- nb_class
# Matrice de confusion
# print(table(payment_QF_ET$default, nb_class))
# Test du classifeur : probabilites pour chaque prediction
nb_prob <- predict(nb, payment_QF_ET, type="prob")
# Courbe ROC
nb_pred <- prediction(nb_prob[,2], payment_QF_ET$default)
nb_perf <- performance(nb_pred,"tpr","fpr")
plot(nb_perf, main = "Classifieurs bayésiens naïfs naiveBayes()", add = arg3, col = arg4)
# Calcul de l'AUC et affichage par la fonction cat()
nb_auc <- performance(nb_pred, "auc")
cat("AUC = ", as.character(attr(nb_auc, "y.values")))
# Return sans affichage sur la console
invisible()
}
test_nb(0, FALSE, FALSE, "red")
library(nnet)
library(ROCR)
library(e1071)
library(naivebayes)
library(rpart)
library(randomForest)
library(kknn)
test_nb(0, FALSE, FALSE, "red")
test_rpart <- function(arg1, arg2, arg3, arg4){
# Apprentissage du classifeur
dt <- rpart(default~., payment_QF_EA, parms = list(split = arg1), control = rpart.control(minbucket = arg2))
# Tests du classifieur : classe predite
dt_class <- predict(dt, payment_QF_ET, type="class")
payment_QF_ET$default <- dt_class
# Matrice de confusion
print(table(payment_QF_ET$default, dt_class))
# Tests du classifieur : probabilites pour chaque prediction
dt_prob <- predict(dt, payment_QF_ET, type="prob")
# Courbes ROC
dt_pred <- prediction(dt_prob[,2], payment_QF_ET$default)
dt_perf <- performance(dt_pred,"tpr","fpr")
plot(dt_perf, main = "Arbres de décision rpart()", add = arg3, col = arg4)
# Calcul de l'AUC et affichage par la fonction cat()
dt_auc <- performance(dt_pred, "auc")
cat("AUC = ", as.character(attr(dt_auc, "y.values")))
# Return sans affichage sur la console
invisible()
}
test_rpart("gini", 10, FALSE, "red")
test_nb(0, FALSE, FALSE, "red")
test_nb <- function(arg1, arg2, arg3, arg4){
# Apprentissage du classifeur
nb <- naive_bayes(default~., payment_QF_EA, laplace = arg1, usekernel = arg2)
# Test du classifeur : classe predite
nb_class <- predict(nb, payment_QF_ET, type="class")
payment_QF_ET$default <- nb_class
# Matrice de confusion
print(table(payment_QF_ET$default, nb_class))
# Test du classifeur : probabilites pour chaque prediction
nb_prob <- predict(nb, payment_QF_ET, type="prob")
# Courbe ROC
nb_pred <- prediction(nb_prob[,2], payment_QF_ET$default)
nb_perf <- performance(nb_pred,"tpr","fpr")
plot(nb_perf, main = "Classifieurs bayésiens naïfs naiveBayes()", add = arg3, col = arg4)
# Calcul de l'AUC et affichage par la fonction cat()
nb_auc <- performance(nb_pred, "auc")
cat("AUC = ", as.character(attr(nb_auc, "y.values")))
# Return sans affichage sur la console
invisible()
}
test_nb(0, FALSE, FALSE, "red")
test_rpart("information", 10, TRUE, "green")
test_rpart("information", 5, TRUE, "orange")
test_rpart("gini", 5, TRUE, "blue")
test_rpart("gini", 5, TRUE, "blue")
test_rpart("gini", 5, TRUE, "blue")
test_nb(0, FALSE, FALSE, "red")
test_nb(0, FALSE, FALSE, "red")
test_nb(0, FALSE, FALSE, "red")
test_nb(20, TRUE, TRUE, "orange")
test_nb(20, TRUE, TRUE, "orange")
test_nb(20, FALSE, TRUE, "blue")
test_nb(0, TRUE, TRUE, "green")
test_rpart("gini", 10, FALSE, "red")
test_rpart("information", 10, TRUE, "green")
test_rf <- function(arg1, arg2, arg3, arg4){
# Apprentissage du classifeur
rf <- randomForest(default~., default_QF_EA, ntree = arg1, mtry = arg2)
# Test du classifeur : classe predite
rf_class <- predict(rf,payment_QF_ET, type="response")
payment_QF_ET$default <- rf_class
# Matrice de confusion
print(table(payment_QF_ET$default, rf_class))
# Test du classifeur : probabilites pour chaque prediction
rf_prob <- predict(rf, payment_QF_ET, type="prob")
# Courbe ROC
rf_pred <- prediction(rf_prob[,2], payment_QF_ET$default)
rf_perf <- performance(rf_pred,"tpr","fpr")
plot(rf_perf, main = "Random Forests randomForest()", add = arg3, col = arg4)
# Calcul de l'AUC et affichage par la fonction cat()
rf_auc <- performance(rf_pred, "auc")
cat("AUC = ", as.character(attr(rf_auc, "y.values")))
# Return sans affichage sur la console
invisible()
}
test_rf(300, 3, FALSE, "red")
test_rf <- function(arg1, arg2, arg3, arg4){
# Apprentissage du classifeur
rf <- randomForest(default~., payment_QF_EA, ntree = arg1, mtry = arg2)
# Test du classifeur : classe predite
rf_class <- predict(rf,payment_QF_ET, type="response")
payment_QF_ET$default <- rf_class
# Matrice de confusion
print(table(payment_QF_ET$default, rf_class))
# Test du classifeur : probabilites pour chaque prediction
rf_prob <- predict(rf, payment_QF_ET, type="prob")
# Courbe ROC
rf_pred <- prediction(rf_prob[,2], payment_QF_ET$default)
rf_perf <- performance(rf_pred,"tpr","fpr")
plot(rf_perf, main = "Random Forests randomForest()", add = arg3, col = arg4)
# Calcul de l'AUC et affichage par la fonction cat()
rf_auc <- performance(rf_pred, "auc")
cat("AUC = ", as.character(attr(rf_auc, "y.values")))
# Return sans affichage sur la console
invisible()
}
payment_QF_ET$default <- rf_class
test_rf <- function(arg1, arg2, arg3, arg4){
# Apprentissage du classifeur
rf <- randomForest(default~., payment_QF_EA, ntree = arg1, mtry = arg2)
# Test du classifeur : classe predite
rf_class <- predict(rf,payment_QF_ET, type="response")
payment_QF_ET$default <- rf_class
# Matrice de confusion
print(table(payment_QF_ET$default, rf_class))
# Test du classifeur : probabilites pour chaque prediction
rf_prob <- predict(rf, payment_QF_ET, type="prob")
# Courbe ROC
rf_pred <- prediction(rf_prob[,2], payment_QF_ET$default)
rf_perf <- performance(rf_pred,"tpr","fpr")
plot(rf_perf, main = "Random Forests randomForest()", add = arg3, col = arg4)
# Calcul de l'AUC et affichage par la fonction cat()
rf_auc <- performance(rf_pred, "auc")
cat("AUC = ", as.character(attr(rf_auc, "y.values")))
# Return sans affichage sur la console
invisible()
}
test_rf(300, 3, FALSE, "red")
test_rf(300, 5, TRUE, "blue")
quit()
q
